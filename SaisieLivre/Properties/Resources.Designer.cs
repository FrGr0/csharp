//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SaisieLivre.Properties {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SaisieLivre.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _0021___Recycle_Bin_Full48_48x48 {
            get {
                object obj = ResourceManager.GetObject("_0021___Recycle_Bin_Full48_48x48", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _12 {
            get {
                object obj = ResourceManager.GetObject("_12", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _23173_bubka_Setting {
            get {
                object obj = ResourceManager.GetObject("_23173_bubka_Setting", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Icon semblable à (Icône).
        /// </summary>
        internal static System.Drawing.Icon _39809 {
            get {
                object obj = ResourceManager.GetObject("_39809", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _398091 {
            get {
                object obj = ResourceManager.GetObject("_398091", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap certified_1 {
            get {
                object obj = ResourceManager.GetObject("certified_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap down {
            get {
                object obj = ResourceManager.GetObject("down", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap giphy {
            get {
                object obj = ResourceManager.GetObject("giphy", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Green_Valider {
            get {
                object obj = ResourceManager.GetObject("Green_Valider", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Green_Valider1 {
            get {
                object obj = ResourceManager.GetObject("Green_Valider1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap image_a_venir {
            get {
                object obj = ResourceManager.GetObject("image_a_venir", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap panneau_temporaire_ak14_sans {
            get {
                object obj = ResourceManager.GetObject("panneau_temporaire_ak14_sans", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Paste {
            get {
                object obj = ResourceManager.GetObject("Paste", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap picto_visuel {
            get {
                object obj = ResourceManager.GetObject("picto_visuel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT 
        ///    first 200 
        ///    l.gencod     
        ///from Livre l 
        ///where 
        ///    l.livreancien=0 and 
        ///	{0}
        ///order by l.dateparution.
        /// </summary>
        internal static string QueryGenListe {
            get {
                return ResourceManager.GetString("QueryGenListe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à INSERT INTO LIVRE
        ///( datecreation,
        ///  datemaj,
        ///  mbexport,
        ///  gencod,
        ///  titre,
        ///  libelle,
        ///  idlectorat,
        ///  editeur,
        ///  distributeur,
        ///  collection, 
        ///  idcollection,
        ///  prixeuro,
        ///  codeTVA,
        ///  auteurs,
        ///  dateparution,
        ///  codesupport,
        ///  idtraducteur,
        ///  id_style,
        ///  idlangue,
        ///  idtraduiten,
        ///  codelangue,
        ///  dispo,
        ///  iad,
        ///  commentaire,
        ///  poids, 
        ///  nbrpages,
        ///  longueur,
        ///  largeur,
        ///  origine,
        ///  image,
        ///  image_4,
        ///  relie,
        ///  broche,
        ///  livrelu,
        ///  grandscaracteres,
        ///  multilingue,
        ///  obcode,        /// [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QueryInsertLivre {
            get {
                return ResourceManager.GetString("QueryInsertLivre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à INSERT INTO T_MULTIDISTRI ( GENCOD, DISTRIBUTEUR, CODEEDITEUR, IDCOLLECTION, 
        ///NOCOLL, PRIX, DATEPARUTION, DISPO, DATECREATION, DATEMAJ)
        /// VALUES (
        ///&apos;{0}&apos;, 
        ///&apos;{1}&apos;, 
        ///&apos;{2}&apos;, 
        ///&apos;{3}&apos;, 
        ///&apos;{4}&apos;, 
        ///&apos;{5}&apos;, 
        ///&apos;{6}&apos;, 
        ///&apos;{7}&apos;, 
        ///&apos;now&apos;, 
        ///&apos;now&apos;
        ///)
        ///.
        /// </summary>
        internal static string QueryInsertMultiDistri {
            get {
                return ResourceManager.GetString("QueryInsertMultiDistri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT 
        ///	l.gencod, 
        ///	Cast(Trim( l.titre ) as varchar(250)) as titre, 
        ///	
        ///	Cast(Trim( l.libelle ) as varchar(250)) as libelle,
        ///
        ///	Cast(Trim( l.auteurs ) as varchar(120)) as auteurs, 
        ///		
        ///	CAST(
        ///        trim( e.editeur ) ||                                                                                                   
        ///        case                                                                                                                 
        ///			when ( COALESCE( e.libelle_complet, &apos;&apos; ) != &apos;&apos; ) then  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QueryLivre {
            get {
                return ResourceManager.GetString("QueryLivre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT 
        ///	l.gencod, 
        ///	l.titre, 
        ///	l.libelle, 
        ///	l.serie, 
        ///	l.codesupport, 	
        ///	l.idlectorat, 
        ///	
        ///	l.idsupport,
        ///
        ///	-- Case when ( coalesce( l.idcollection, 0 )&gt;0 ) then c.collection else l.collection end as collection, 
        ///    c.collection,
        ///    
        ///	coalesce( m.nocoll, 0 ) as nocoll,
        ///    
        ///	--e.editeur, 
        ///
        ///	CAST(
        ///        trim( e.editeur ) ||                                                                                                   
        ///        case                                                       [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QueryLivreAlternate {
            get {
                return ResourceManager.GetString("QueryLivreAlternate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT 
        ///	b.titre, 
        ///	b.auteurs, 
        ///	b.editeur as EditeurDilicom, 
        ///	coalesce( e.col1, b.editeur ) as EditeurTL,
        ///	d.distributeur,
        ///	COALESCE( b.collection, &apos;&apos; ) as CollectionDilicom,
        ///	COALESCE( c.collection, cc.collection, &apos;&apos; ) as CollectionTL,
        ///	b.nocoll, 	
        ///	Cast( date2str( b.dateparution, &apos;D/M/Y&apos; ) as varchar(10)) as dateparution,
        ///	b.dispo, 	
        ///	roundcent( b.prixeuro ) as prixeuro,
        ///	roundcent( t.tauxtva ) as TVA,
        ///	COALESCE( b.codesupport, &apos;&apos; ) as SupportClil,
        ///	COALESCE( s.codesupportinterne, b.codesu [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QueryLivreBis {
            get {
                return ResourceManager.GetString("QueryLivreBis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Select 
        ///	l.titre,
        ///	l.libelle,
        ///	l.auteurs,
        ///	l.id,
        ///	l.CodeLangue,
        ///	(select returngenres from GETFROM_T_GENRES( l.id )) as returngenre,
        ///	Bloblength(s.sommaire) as lensommaire,
        ///	Bloblength(p.presentation) as lenpresentation,
        ///	s.sommaire,
        ///	p.presentation,
        ///	coalesce( l.id_style, 0 ) as id_style,
        ///	coalesce( l.idlectorat, 0 ) as idlectorat
        ///from livre l 
        ///left join presentations p on p.idlivre = l.id
        ///left join sommaires s on s.idlivre = l.id
        ///where l.gencod=&apos;{0}&apos; and
        ///	  coalesce( l.livreancien, 0 ) =  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QuerySelectChainage {
            get {
                return ResourceManager.GetString("QuerySelectChainage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT 
        ///	Coalesce(c.present_titre, 0) as present_titre,
        ///    cast( trim( c.collection ) as varchar(160)) as collection,                                                          
        ///    cast( trim( c.editeur ) as varchar(40)) as editeur,                                                                               
        ///    c.auteurs, 
        ///	case when ( c.codesupport is null ) then &apos;&apos; else c.codesupport end as codesupport,    
        ///	case when (l.id=0) then &apos;&apos; else cast(lower(l.libelle) as varchar(50)) end as lectorat,
        ///	 [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QuerySelectCollection {
            get {
                return ResourceManager.GetString("QuerySelectCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT    
        ///	case when (s2.id = 0 ) then &apos;&apos; else s2.libelle end as serie_mere,
        ///    coalesce( s.Present_Titre, 0) as present_titre,    
        ///	s.Libelle as Serie,
        ///    cast( coalesce( s.Auteurs, &apos;&apos; ) as varchar(80)) as auteurs,
        ///	case when (lc.id=0) then &apos;&apos; else cast( lower(lc.libelle) as varchar(50)) end as lectorat,
        ///    cast( case when (l.col0=0) then &apos;&apos; else coalesce( l.col1, &apos;&apos; ) end as varchar(60)) as style,
        ///	case when (s.codelangue is null or s.codelangue=0) then &apos;&apos; else s.codelangue end as codelangue,
        /// [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QuerySelectSeries {
            get {
                return ResourceManager.GetString("QuerySelectSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à update livre
        ///set 
        ///	titre      = &apos;{0}&apos;, 
        ///	auteurs    = &apos;{1}&apos;, 
        ///	libelle    = &apos;{2}&apos;, 
        ///	codelangue = &apos;{3}&apos;, 
        ///	idlectorat = &apos;{4}&apos;,
        ///	id_style   = &apos;{5}&apos;,
        ///	datemaj    = &apos;now&apos;, 
        ///	mbexport   = 1 
        ///where 
        ///	gencod=&apos;{6}&apos; and 
        ///	( titre     != &apos;{0}&apos; or 
        ///	  auteurs   != &apos;{1}&apos; or 
        ///	  libelle   != &apos;{2}&apos; or 
        ///	  codelangue!= &apos;{3}&apos; or 
        ///	  idlectorat!= &apos;{4}&apos; or
        ///	  id_style  != &apos;{5}&apos; ).
        /// </summary>
        internal static string QueryUpdateChainage {
            get {
                return ResourceManager.GetString("QueryUpdateChainage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à UPDATE LIVRE
        ///SET 
        ///    datemaj      = &apos;now&apos;,
        ///    mbexport     = 1,       
        ///    
        ///    titre        = &apos;{0}&apos;,
        ///    libelle      = &apos;{1}&apos;,
        ///    idlectorat   = &apos;{2}&apos;,
        ///    
        ///    editeur      = &apos;{3}&apos;,    
        ///    distributeur = &apos;{4}&apos;,
        ///    collection   =  cast( copy( &apos;{5}&apos;, 1, 40 ) as varchar(40)),
        ///    idcollection = &apos;{6}&apos;,
        ///    prixeuro     = &apos;{7}&apos;, 
        ///    codeTVA      = &apos;{8}&apos;, 
        ///    auteurs      = &apos;{9}&apos;,
        ///    dateparution = &apos;{10}&apos;,
        ///    codesupport  = &apos;{11}&apos;,
        ///    idtraducteur = &apos;{12}&apos;,
        ///    id_style     = &apos;{13}&apos; [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QueryUpdateLivre {
            get {
                return ResourceManager.GetString("QueryUpdateLivre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à UPDATE LIVRE
        ///SET 
        ///    datemaj      = &apos;now&apos;,
        ///    mbexport     = 1,       
        ///    
        ///    titre        = &apos;{0}&apos;,
        ///    libelle      = &apos;{1}&apos;,
        ///    idlectorat   = &apos;{2}&apos;,
        ///    
        ///    -- editeur      = &apos;&apos;,    
        ///    -- distributeur = &apos;&apos;,
        ///    -- collection   = &apos;&apos;,
        ///    -- idcollection = &apos;&apos;,
        ///    -- prixeuro     = &apos;&apos;, 
        ///
        ///    codeTVA      = &apos;{3}&apos;, 
        ///    auteurs      = &apos;{4}&apos;,
        ///
        ///    -- dateparution = &apos;&apos;,
        ///
        ///    codesupport  = &apos;{5}&apos;,
        ///    idtraducteur = &apos;{6}&apos;,
        ///    id_style     = &apos;{7}&apos;,
        ///    idlangue     = &apos;{8}&apos;,
        ///    id [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string QueryUpdateLivreAlternate {
            get {
                return ResourceManager.GetString("QueryUpdateLivreAlternate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à update T_MULTIDISTRI
        ///set 
        ///    distributeur=&apos;{0}&apos;,
        ///    codeediteur=&apos;{1}&apos;,
        ///    idcollection=&apos;{2}&apos;,
        ///	collection=&apos;{8}&apos;,
        ///    nocoll=&apos;{3}&apos;,
        ///    prix=&apos;{4}&apos;,
        ///    dateparution=&apos;{5}&apos;,
        ///    dispo=&apos;{6}&apos;,
        ///    datemaj=&apos;now&apos;    
        ///where 
        ///    id = &apos;{7}&apos;;.
        /// </summary>
        internal static string QueryUpdateMultiDistri {
            get {
                return ResourceManager.GetString("QueryUpdateMultiDistri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Red_Annuler {
            get {
                object obj = ResourceManager.GetObject("Red_Annuler", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Red_Annuler1 {
            get {
                object obj = ResourceManager.GetObject("Red_Annuler1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Save_icon {
            get {
                object obj = ResourceManager.GetObject("Save_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap search1 {
            get {
                object obj = ResourceManager.GetObject("search1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT
        ///	c.Present_titre,
        ///	c.Collection,
        ///	c.Editeur, 	
        ///	c.Auteurs,	
        ///	c.codesupport,
        ///	case when (l.id=0) then &apos;&apos; else l.libelle end as lectorat,
        ///	case when (st.col0=0) then &apos;&apos; else st.col1 end as style,
        ///	/*c.NewGenre, */	
        ///	coalesce( c.codelangue, 0 ) as codelangue,
        ///	case when (t.id=0) then &apos;&apos; else cast( t.nom || case when (t.prenom!=&apos;&apos; or t.prenom is not null) then &apos;, &apos; || t.prenom else &apos;&apos; end as varchar(80)) end as traducteur,
        ///	case when (la.id=0) then &apos;&apos; else la.libelle end as langue_de,
        ///	case w [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string SelectFromCollectionsForNewCollection {
            get {
                return ResourceManager.GetString("SelectFromCollectionsForNewCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SELECT
        ///	case when(s2.id=0) then &apos;&apos; else s2.libelle end as serie_mere,
        ///	coalesce( s.present_titre, 0 ) as present_titre,
        ///	s.libelle as serie,
        ///	s.auteurs,
        ///	case when (l.id=0) then &apos;&apos; else l.libelle end as lectorat,
        ///	case when (st.col0=0) then &apos;&apos; else st.col1 end as style,
        ///	coalesce( s.codelangue, 0) as codelangue,
        ///	/* s.codelangue, */
        ///	case when (t.id=0) then &apos;&apos; else cast( t.nom || case when (t.prenom!=&apos;&apos; or t.prenom is not null) then &apos;, &apos; || t.prenom else &apos;&apos; end as varchar(80)) end as traducteur,
        ///	 [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string SelectFromLibseriesForNewCollection {
            get {
                return ResourceManager.GetString("SelectFromLibseriesForNewCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap titelive_logo {
            get {
                object obj = ResourceManager.GetObject("titelive_logo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap user {
            get {
                object obj = ResourceManager.GetObject("user", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
